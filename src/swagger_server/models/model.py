# coding: utf-8
from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401
from typing import List, Dict  # noqa: F401
from swagger_server.models.base_model_ import Model
from swagger_server.models.tag import Tag
from swagger_server import util
from typing import List, Dict  # noqa: F401

# not visible from init? https://github.com/swagger-api/swagger-codegen/issues/10193
from swagger_server.models.category import Category


class Model(Model):
    #20% performance https://www.youtube.com/watch?v=Fot3_9eDmOs
    #__slot__ = "id", "categoty", "name", "version"

    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, config: object = None):  # noqa: E501
        """Model - a model defined in Swagger

        :param config: The configuration file for Model.  # noqa: E501
        :type config: List[str]
        """
        self.swagger_types = {
            'id': int,
            'category': Category,
            'filename': str,
            # 'tags': 'tags',
            'version': str
        }

        self.attribute_map = {
            'id': 'id',
            'category': 'category',
            'filename': 'filename',
            # 'tags': 'tags',
            'version': 'version'
        }

        #self._config = config
        if "id" in config:
            self._id = config["id"]
        if "category" in config:
            self._category = config["category"]
        if "filename" in config:
            self._filename = config["filename"]
        if "version" in config:
            self._version = config["version"]
        if "tags" in config:
            self._tags = config["tags"]
            
        #internal fields
        if "thresholds" in config:
            self._thresholds = config["thresholds"]
        if "labels" in config:
            self._labels = config["labels"]
        if "training_info" in config:
            self._training_info = config["training_info"]

    @classmethod
    def from_dict(cls, dikt) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Model of this Model.  # noqa: E501
        :rtype: Model
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Model.


        :return: The id of this Model.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Model.


        :param id: The id of this Model.
        :type id: int
        """

        self._id = id

    @property
    def category(self) -> Category:
        """Gets the category of this Model.


        :return: The category of this Model.
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category: Category):
        """Sets the category of this Model.


        :param category: The category of this Model.
        :type category: Category
        """

        self._category = category

    @property
    def filename(self) -> str:
        """Gets the filename of this Model.


        :return: The filename of this Model.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename: str):
        """Sets the filename of this Model.


        :param filename: The filename of this Model.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501

        self._name = filename


    # @property
    # def tags(self) -> List[Tag]:
    #     """Gets the tags of this Model.


    #     :return: The tags of this Model.
    #     :rtype: List[Tag]
    #     """
    #     return self._tags

    # @tags.setter
    # def tags(self, tags: List[Tag]):
    #     """Sets the tags of this Model.


    #     :param tags: The tags of this Model.
    #     :type tags: List[Tag]
    #     """

    #     self._tags = tags

    @property
    def version(self) -> str:
        """Gets the version of this Model.

        model version in the storage  # noqa: E501

        :return: The version of this Model.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this Model.

        model version in the storage  # noqa: E501

        :param version: The version of this Model.
        :type version: str
        """
        # allowed_values = ["2", "3", "4"]  # noqa: E501
        # if version not in allowed_values:
        #     raise ValueError(
        #         "Invalid value for `version` ({0}), must be one of {1}"
        #         .format(version, allowed_values)
        #     )

        self._version = version
