# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util

#not visible from init? https://github.com/swagger-api/swagger-codegen/issues/10193
from swagger_server.models.troponin import Troponin

class PatientRecord(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, age: int=None, gender: bool=None, angiogram: int=None, troponine: List[Troponin]=None, config: object = None):  # noqa: E501
        """PatientRecord - a model defined in Swagger

        :param age: The age of this PatientRecord.  # noqa: E501
        :type age: int
        :param gender: The gender of this PatientRecord.  # noqa: E501
        :type gender: bool
        :param angiogram: The angiogram of this PatientRecord.  # noqa: E501
        :type angiogram: int
        :param troponine: The troponine of this PatientRecord.  # noqa: E501
        :type troponine: List[Troponin]
        """
        self.swagger_types = {
            'age': int,
            'gender': bool,
            'angiogram': int,
            'troponine': List[Troponin]
        }

        self.attribute_map = {
            'age': 'age',
            'gender': 'gender',
            'angiogram': 'angiogram',
            'troponine': 'troponine'
        }

        if "age" in config:
            age = config["age"]
        if "gender" in config:
            gender = config["gender"]
        if "angiogram" in config:
            angiogram = config["angiogram"]
        if "troponine" in config:
            troponine = config["troponine"]

        self._age = age
        self._gender = gender
        self._angiogram = angiogram
        self._troponine = troponine

    @classmethod
    def from_dict(cls, dikt) -> 'PatientRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PatientRecord of this PatientRecord.  # noqa: E501
        :rtype: PatientRecord
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self) -> int:
        """Gets the age of this PatientRecord.


        :return: The age of this PatientRecord.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this PatientRecord.


        :param age: The age of this PatientRecord.
        :type age: int
        """

        self._age = age

    @property
    def gender(self) -> bool:
        """Gets the gender of this PatientRecord.

        bit 0: male, 1: female  # noqa: E501

        :return: The gender of this PatientRecord.
        :rtype: bool
        """
        return self._gender

    @gender.setter
    def gender(self, gender: bool):
        """Sets the gender of this PatientRecord.

        bit 0: male, 1: female  # noqa: E501

        :param gender: The gender of this PatientRecord.
        :type gender: bool
        """

        self._gender = gender

    @property
    def angiogram(self) -> int:
        """Gets the angiogram of this PatientRecord.


        :return: The angiogram of this PatientRecord.
        :rtype: int
        """
        return self._angiogram

    @angiogram.setter
    def angiogram(self, angiogram: int):
        """Sets the angiogram of this PatientRecord.


        :param angiogram: The angiogram of this PatientRecord.
        :type angiogram: int
        """

        self._angiogram = angiogram

    @property
    def troponine(self) -> List[Troponin]:
        """Gets the troponine of this PatientRecord.

        array of troponine history records  # noqa: E501

        :return: The troponine of this PatientRecord.
        :rtype: List[Troponin]
        """
        return self._troponine

    @troponine.setter
    def troponine(self, troponine: List[Troponin]):
        """Sets the troponine of this PatientRecord.

        array of troponine history records  # noqa: E501

        :param troponine: The troponine of this PatientRecord.
        :type troponine: List[Troponin]
        """

        self._troponine = troponine
