swagger: "2.0"
info:
  description: "Myocardial infarction risk predicting ML models released by Docker container as a web service. Additional requirements - such as 30-day death prediction and CABG/Intervention prediction at this point. It is believed that the requirements will keep growing. This project aims to adjust or create a new docker container every time a new ML model is built and be able to bulk process capacity if a user chooses to send package containing an arbitrary number of patient records."
  version: "4.2"
  title: "Containerization of machine learning"
  termsOfService: "https://www.heartai.net/development/development-guide/index.html"
  contact:
    email: "zhibin.liao@adelaide.edu.au"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "rapidxai.dev.apps.aro.sah.heartai.net"
basePath: "/rapidx_ai/api/public/analytics/zl"
tags:
- name: "model"
  description: "Everything about ML Models"
  externalDocs:
    description: "Find out more aboput analytical implementation"
    url: "https://www.heartai.net/projects/rapidx-ai/analytical-implementation-zhibin-liao/index.html"
- name: "storage"
  description: "Access to Model storage orders"
- name: "inference"
  description: "Operations about inference"
  externalDocs:
    description: "Find out more about HeartAI API"
    url: "https://postman.heartai.net"
schemes:
- "http"
paths:
  /model:
    post:
      tags:
      - "model"
      summary: "Add a new model to the storage"
      description: ""
      operationId: "addModel"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Model object that needs to be added to the storage"
        required: true
        schema:
          $ref: "#/definitions/Model"
      responses:
        "405":
          description: "Invalid input"
      security:
      - model_auth:
        - "write:models"
        - "read:models"
    put:
      tags:
      - "model"
      summary: "Update an existing model"
      description: ""
      operationId: "updateModel"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Model object that needs to be added to the storage"
        required: true
        schema:
          $ref: "#/definitions/Model"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Model not found"
        "405":
          description: "Validation exception"
      security:
      - model_auth:
        - "write:models"
        - "read:models"
  /model/findByVersion:
    get:
      tags:
      - "model"
      summary: "Finds Models by version"
      description: "Multiple version values can be provided with comma separated strings"
      operationId: "findModelsByVersion"
      produces:
      - "application/json"
      parameters:
      - name: "version"
        in: "query"
        description: "Model's version values that need to be considered for inference"
        required: true
        type: "number"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Model"
        "400":
          description: "Invalid version value"
      security:
      - model_auth:
        - "write:models"
        - "read:models"
  /model/findByTags:
    get:
      tags:
      - "model"
      summary: "Finds Models by tags"
      description: "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
      operationId: "findModelsByTags"
      produces:
      - "application/json"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Model"
        "400":
          description: "Invalid tag value"
      security:
      - model_auth:
        - "write:models"
        - "read:models"
      deprecated: true
  /model/{modelId}:
    get:
      tags:
      - "model"
      summary: "Find model by ID"
      description: "Returns a single model"
      operationId: "getModelById"
      produces:
      - "application/json"
      parameters:
      - name: "modelId"
        in: "path"
        description: "ID of model to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Model"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Model not found"
    post:
      tags:
      - "model"
      summary: "Updates a model in the storage with form data"
      description: ""
      operationId: "updateModelWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "modelId"
        in: "path"
        description: "ID of model that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the model"
        required: false
        type: "string"
      - name: "version"
        in: "formData"
        description: "Updated version of the model"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - model_auth:
        - "write:models"
        - "read:models"
    delete:
      tags:
      - "model"
      summary: "Deletes a model"
      description: ""
      operationId: "deleteModel"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "modelId"
        in: "path"
        description: "Model id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Model not found"
      security:
      - model_auth:
        - "write:models"
        - "read:models"
  /model/{modelId}/uploadPickle:
    post:
      tags:
      - "model"
      summary: "uploads a pickle file"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "modelId"
        in: "path"
        description: "ID of model to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
      security:
      - model_auth:
        - "write:models"
        - "read:models"
  /outcomes:
    get:
      tags:
      - "storage"
      summary: "Returns model outcomes"
      description: "There are 5 outcomes: `Normal`, `Chronic`, `Acute`, `T2MI`, `T1MI`."
      operationId: "getOutcomes"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
  /events:
    get:
      tags:
      - "storage"
      summary: "Returns model events"
      description: "There are 2 events in scope: event_dead, event_dmi30d."
      operationId: "getEvents"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
  /features:
    get:
      tags:
      - "storage"
      summary: "Returns model features"
      description: "There are 3 features in scope: phys_ckmb, phys_po2, angiogram."
      operationId: "getFeatures"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
  /exclusions:
    get:
      tags:
      - "storage"
      summary: "Returns model exclusions"
      description: "There are 14 exclusions in scope: avgtrop, avgspd,maxtrop,mintrop,maxvel,minvel,divtrop,difftrop,diffvel,logtrop0,trop7,trop8,time_trop7,time_trop8."
      operationId: "getExclusions"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
  /health_check:
    get:
      tags:
      - "inference"
      summary: "health check"
      description: "used by rapidx_ai endpoint zl/health_check"
      operationId: "InferenceHealthCheck"
      produces:
      - "text/plain"
      parameters: []
      responses:
        '200':
          description: OK
          schema:
            type: string
  /predict:
    post:
      tags:
      - "inference"
      summary: "Predict list of inferences with given input array"
      description: "used by rapidx_ai endpoints: zl/predict/cardiac_diagnosis/dl; zl/predict/cardiac_diagnosis/xgb; zl/predict/event_30day/xgb"
      operationId: "InferencePredict"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "query"
        description: "Type of prediction"
        required: true
        type: "string"
        enum:
        - "outcome"
        - "event"
        - "revasc"
      - name: "model"
        in: "query"
        description: "Model for prediction"
        required: true
        type: "string"
        enum:
        - "dl"
        - "xgb"
      - name: "version"
        in: "query"
        description: "Model version for prediction"
        required: false
        type: "number"
      - in: "body"
        name: "body"
        description: "List of patient records"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatientRecord"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/InferenceResult"
        "400":
          description: "Invalid payload"
securityDefinitions:
  model_auth:
    type: "oauth2"
    authorizationUrl: "http://modelstorage.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:models: "modify models in your account"
      read:models: "read your models"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Troponin:
    type: "object"
    properties:
      value:
        type: "integer"
        format: "int32"
      time:
        type: "integer"
        format: "int64"
        description: "as day milliseconds"
  PatientRecord:
    type: "object"
    properties:
      age:
        type: "integer"
        format: "int32"
      gender:
        type: "boolean"
        description: "bit 0: male, 1: female"
      angiogram:
        type: "integer"
        format: "int32"
      troponine:
        type: "array"
        items:
          $ref: "#/definitions/Troponin"
        description: "array of troponine history records"
  Category:
    type: "object"
    properties:
      code:
        type: "string"
        example: 
          - "dl"
          - "xgb"
          - "other"
      name:
        type: "string"
        example: 
          - "Deep Neural Network"
          - "Gradient Boost"
          - "Other"
  InferenceFeature:
    type: "object"
    properties:
      name:
        type: "string"
      value:
        type: "string"
  InferenceResult:
    type: "object"
    properties:
      patientId:
        type: "integer"
        format: "int32"
        description: "Patients inique identifier is derived from Patient record signature"
      modelId:
        type: "integer"
        format: "int32"
        description: "Model's inique identifier"
      features:
        type: "array"
        items:
          $ref: "#/definitions/InferenceFeature"
        description: "array of features with predicted values"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      name:
        type: "string"
  Model:
    type: "object"
    required:
    - "name"
    - "content"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
      content:
        type: "array"
        description: "model pickle file binary"
        items:
          type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      version:
        type: "string"
        description: "model version in the storage"
        enum:
        - "available"
        - "pending"
        - "sold"
externalDocs:
  description: "Find out more about HeartAI RAPIDx services"
  url: "https://www.heartai.net/services/rapidx-ai-service/index.html"